/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ManagementImport } from './routes/management'
import { Route as LoginImport } from './routes/login'
import { Route as MainLayoutImport } from './routes/_mainLayout'
import { Route as MainLayoutProfileImport } from './routes/_mainLayout/profile'
import { Route as MainLayoutRecipeIndexImport } from './routes/_mainLayout/recipe.index'
import { Route as MainLayoutRecipeIdImport } from './routes/_mainLayout/recipe.$id'

// Create Virtual Routes

const ManagementIndexLazyImport = createFileRoute('/management/')()
const MainLayoutIndexLazyImport = createFileRoute('/_mainLayout/')()
const ManagementUnitsLazyImport = createFileRoute('/management/units')()
const MainLayoutPlansLazyImport = createFileRoute('/_mainLayout/plans')()

// Create/Update Routes

const ManagementRoute = ManagementImport.update({
  id: '/management',
  path: '/management',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const MainLayoutRoute = MainLayoutImport.update({
  id: '/_mainLayout',
  getParentRoute: () => rootRoute,
} as any)

const ManagementIndexLazyRoute = ManagementIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ManagementRoute,
} as any).lazy(() =>
  import('./routes/management/index.lazy').then((d) => d.Route),
)

const MainLayoutIndexLazyRoute = MainLayoutIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainLayoutRoute,
} as any).lazy(() =>
  import('./routes/_mainLayout/index.lazy').then((d) => d.Route),
)

const ManagementUnitsLazyRoute = ManagementUnitsLazyImport.update({
  id: '/units',
  path: '/units',
  getParentRoute: () => ManagementRoute,
} as any).lazy(() =>
  import('./routes/management/units.lazy').then((d) => d.Route),
)

const MainLayoutPlansLazyRoute = MainLayoutPlansLazyImport.update({
  id: '/plans',
  path: '/plans',
  getParentRoute: () => MainLayoutRoute,
} as any).lazy(() =>
  import('./routes/_mainLayout/plans.lazy').then((d) => d.Route),
)

const MainLayoutProfileRoute = MainLayoutProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => MainLayoutRoute,
} as any)

const MainLayoutRecipeIndexRoute = MainLayoutRecipeIndexImport.update({
  id: '/recipe/',
  path: '/recipe/',
  getParentRoute: () => MainLayoutRoute,
} as any)

const MainLayoutRecipeIdRoute = MainLayoutRecipeIdImport.update({
  id: '/recipe/$id',
  path: '/recipe/$id',
  getParentRoute: () => MainLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_mainLayout': {
      id: '/_mainLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainLayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/management': {
      id: '/management'
      path: '/management'
      fullPath: '/management'
      preLoaderRoute: typeof ManagementImport
      parentRoute: typeof rootRoute
    }
    '/_mainLayout/profile': {
      id: '/_mainLayout/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof MainLayoutProfileImport
      parentRoute: typeof MainLayoutImport
    }
    '/_mainLayout/plans': {
      id: '/_mainLayout/plans'
      path: '/plans'
      fullPath: '/plans'
      preLoaderRoute: typeof MainLayoutPlansLazyImport
      parentRoute: typeof MainLayoutImport
    }
    '/management/units': {
      id: '/management/units'
      path: '/units'
      fullPath: '/management/units'
      preLoaderRoute: typeof ManagementUnitsLazyImport
      parentRoute: typeof ManagementImport
    }
    '/_mainLayout/': {
      id: '/_mainLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainLayoutIndexLazyImport
      parentRoute: typeof MainLayoutImport
    }
    '/management/': {
      id: '/management/'
      path: '/'
      fullPath: '/management/'
      preLoaderRoute: typeof ManagementIndexLazyImport
      parentRoute: typeof ManagementImport
    }
    '/_mainLayout/recipe/$id': {
      id: '/_mainLayout/recipe/$id'
      path: '/recipe/$id'
      fullPath: '/recipe/$id'
      preLoaderRoute: typeof MainLayoutRecipeIdImport
      parentRoute: typeof MainLayoutImport
    }
    '/_mainLayout/recipe/': {
      id: '/_mainLayout/recipe/'
      path: '/recipe'
      fullPath: '/recipe'
      preLoaderRoute: typeof MainLayoutRecipeIndexImport
      parentRoute: typeof MainLayoutImport
    }
  }
}

// Create and export the route tree

interface MainLayoutRouteChildren {
  MainLayoutProfileRoute: typeof MainLayoutProfileRoute
  MainLayoutPlansLazyRoute: typeof MainLayoutPlansLazyRoute
  MainLayoutIndexLazyRoute: typeof MainLayoutIndexLazyRoute
  MainLayoutRecipeIdRoute: typeof MainLayoutRecipeIdRoute
  MainLayoutRecipeIndexRoute: typeof MainLayoutRecipeIndexRoute
}

const MainLayoutRouteChildren: MainLayoutRouteChildren = {
  MainLayoutProfileRoute: MainLayoutProfileRoute,
  MainLayoutPlansLazyRoute: MainLayoutPlansLazyRoute,
  MainLayoutIndexLazyRoute: MainLayoutIndexLazyRoute,
  MainLayoutRecipeIdRoute: MainLayoutRecipeIdRoute,
  MainLayoutRecipeIndexRoute: MainLayoutRecipeIndexRoute,
}

const MainLayoutRouteWithChildren = MainLayoutRoute._addFileChildren(
  MainLayoutRouteChildren,
)

interface ManagementRouteChildren {
  ManagementUnitsLazyRoute: typeof ManagementUnitsLazyRoute
  ManagementIndexLazyRoute: typeof ManagementIndexLazyRoute
}

const ManagementRouteChildren: ManagementRouteChildren = {
  ManagementUnitsLazyRoute: ManagementUnitsLazyRoute,
  ManagementIndexLazyRoute: ManagementIndexLazyRoute,
}

const ManagementRouteWithChildren = ManagementRoute._addFileChildren(
  ManagementRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof MainLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/management': typeof ManagementRouteWithChildren
  '/profile': typeof MainLayoutProfileRoute
  '/plans': typeof MainLayoutPlansLazyRoute
  '/management/units': typeof ManagementUnitsLazyRoute
  '/': typeof MainLayoutIndexLazyRoute
  '/management/': typeof ManagementIndexLazyRoute
  '/recipe/$id': typeof MainLayoutRecipeIdRoute
  '/recipe': typeof MainLayoutRecipeIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/profile': typeof MainLayoutProfileRoute
  '/plans': typeof MainLayoutPlansLazyRoute
  '/management/units': typeof ManagementUnitsLazyRoute
  '/': typeof MainLayoutIndexLazyRoute
  '/management': typeof ManagementIndexLazyRoute
  '/recipe/$id': typeof MainLayoutRecipeIdRoute
  '/recipe': typeof MainLayoutRecipeIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_mainLayout': typeof MainLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/management': typeof ManagementRouteWithChildren
  '/_mainLayout/profile': typeof MainLayoutProfileRoute
  '/_mainLayout/plans': typeof MainLayoutPlansLazyRoute
  '/management/units': typeof ManagementUnitsLazyRoute
  '/_mainLayout/': typeof MainLayoutIndexLazyRoute
  '/management/': typeof ManagementIndexLazyRoute
  '/_mainLayout/recipe/$id': typeof MainLayoutRecipeIdRoute
  '/_mainLayout/recipe/': typeof MainLayoutRecipeIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/management'
    | '/profile'
    | '/plans'
    | '/management/units'
    | '/'
    | '/management/'
    | '/recipe/$id'
    | '/recipe'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/profile'
    | '/plans'
    | '/management/units'
    | '/'
    | '/management'
    | '/recipe/$id'
    | '/recipe'
  id:
    | '__root__'
    | '/_mainLayout'
    | '/login'
    | '/management'
    | '/_mainLayout/profile'
    | '/_mainLayout/plans'
    | '/management/units'
    | '/_mainLayout/'
    | '/management/'
    | '/_mainLayout/recipe/$id'
    | '/_mainLayout/recipe/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  MainLayoutRoute: typeof MainLayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
  ManagementRoute: typeof ManagementRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  MainLayoutRoute: MainLayoutRouteWithChildren,
  LoginRoute: LoginRoute,
  ManagementRoute: ManagementRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_mainLayout",
        "/login",
        "/management"
      ]
    },
    "/_mainLayout": {
      "filePath": "_mainLayout.tsx",
      "children": [
        "/_mainLayout/profile",
        "/_mainLayout/plans",
        "/_mainLayout/",
        "/_mainLayout/recipe/$id",
        "/_mainLayout/recipe/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/management": {
      "filePath": "management.tsx",
      "children": [
        "/management/units",
        "/management/"
      ]
    },
    "/_mainLayout/profile": {
      "filePath": "_mainLayout/profile.tsx",
      "parent": "/_mainLayout"
    },
    "/_mainLayout/plans": {
      "filePath": "_mainLayout/plans.lazy.tsx",
      "parent": "/_mainLayout"
    },
    "/management/units": {
      "filePath": "management/units.lazy.tsx",
      "parent": "/management"
    },
    "/_mainLayout/": {
      "filePath": "_mainLayout/index.lazy.tsx",
      "parent": "/_mainLayout"
    },
    "/management/": {
      "filePath": "management/index.lazy.tsx",
      "parent": "/management"
    },
    "/_mainLayout/recipe/$id": {
      "filePath": "_mainLayout/recipe.$id.tsx",
      "parent": "/_mainLayout"
    },
    "/_mainLayout/recipe/": {
      "filePath": "_mainLayout/recipe.index.tsx",
      "parent": "/_mainLayout"
    }
  }
}
ROUTE_MANIFEST_END */
