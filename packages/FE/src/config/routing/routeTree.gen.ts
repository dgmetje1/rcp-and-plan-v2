/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ManagementImport } from "./routes/management";
import { Route as LoginImport } from "./routes/login";
import { Route as MainLayoutImport } from "./routes/_mainLayout";
import { Route as MainLayoutProfileImport } from "./routes/_mainLayout/profile";
import { Route as MainLayoutRecipeIndexImport } from "./routes/_mainLayout/recipe.index";
import { Route as MainLayoutRecipeIdImport } from "./routes/_mainLayout/recipe.$id";

// Create Virtual Routes

const ManagementIndexLazyImport = createFileRoute("/management/")();
const MainLayoutIndexLazyImport = createFileRoute("/_mainLayout/")();
const ManagementUnitsLazyImport = createFileRoute("/management/units")();
const MainLayoutPlansLazyImport = createFileRoute("/_mainLayout/plans")();

// Create/Update Routes

const ManagementRoute = ManagementImport.update({
  path: "/management",
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const MainLayoutRoute = MainLayoutImport.update({
  id: "/_mainLayout",
  getParentRoute: () => rootRoute,
} as any);

const ManagementIndexLazyRoute = ManagementIndexLazyImport.update({
  path: "/",
  getParentRoute: () => ManagementRoute,
} as any).lazy(() => import("./routes/management/index.lazy").then(d => d.Route));

const MainLayoutIndexLazyRoute = MainLayoutIndexLazyImport.update({
  path: "/",
  getParentRoute: () => MainLayoutRoute,
} as any).lazy(() => import("./routes/_mainLayout/index.lazy").then(d => d.Route));

const ManagementUnitsLazyRoute = ManagementUnitsLazyImport.update({
  path: "/units",
  getParentRoute: () => ManagementRoute,
} as any).lazy(() => import("./routes/management/units.lazy").then(d => d.Route));

const MainLayoutPlansLazyRoute = MainLayoutPlansLazyImport.update({
  path: "/plans",
  getParentRoute: () => MainLayoutRoute,
} as any).lazy(() => import("./routes/_mainLayout/plans.lazy").then(d => d.Route));

const MainLayoutProfileRoute = MainLayoutProfileImport.update({
  path: "/profile",
  getParentRoute: () => MainLayoutRoute,
} as any);

const MainLayoutRecipeIndexRoute = MainLayoutRecipeIndexImport.update({
  path: "/recipe/",
  getParentRoute: () => MainLayoutRoute,
} as any);

const MainLayoutRecipeIdRoute = MainLayoutRecipeIdImport.update({
  path: "/recipe/$id",
  getParentRoute: () => MainLayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_mainLayout": {
      preLoaderRoute: typeof MainLayoutImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    "/management": {
      preLoaderRoute: typeof ManagementImport;
      parentRoute: typeof rootRoute;
    };
    "/_mainLayout/profile": {
      preLoaderRoute: typeof MainLayoutProfileImport;
      parentRoute: typeof MainLayoutImport;
    };
    "/_mainLayout/plans": {
      preLoaderRoute: typeof MainLayoutPlansLazyImport;
      parentRoute: typeof MainLayoutImport;
    };
    "/management/units": {
      preLoaderRoute: typeof ManagementUnitsLazyImport;
      parentRoute: typeof ManagementImport;
    };
    "/_mainLayout/": {
      preLoaderRoute: typeof MainLayoutIndexLazyImport;
      parentRoute: typeof MainLayoutImport;
    };
    "/management/": {
      preLoaderRoute: typeof ManagementIndexLazyImport;
      parentRoute: typeof ManagementImport;
    };
    "/_mainLayout/recipe/$id": {
      preLoaderRoute: typeof MainLayoutRecipeIdImport;
      parentRoute: typeof MainLayoutImport;
    };
    "/_mainLayout/recipe/": {
      preLoaderRoute: typeof MainLayoutRecipeIndexImport;
      parentRoute: typeof MainLayoutImport;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  MainLayoutRoute.addChildren([
    MainLayoutProfileRoute,
    MainLayoutPlansLazyRoute,
    MainLayoutIndexLazyRoute,
    MainLayoutRecipeIdRoute,
    MainLayoutRecipeIndexRoute,
  ]),
  LoginRoute,
  ManagementRoute.addChildren([ManagementUnitsLazyRoute, ManagementIndexLazyRoute]),
]);

/* prettier-ignore-end */
